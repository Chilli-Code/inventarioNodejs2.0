<!-- statistics.ejs - Versi√≥n SIMPLIFICADA sin filtros -->

<% if (user.role === 'user') { %>
<div class="swapy-slide three-div" data-swapy-slot="cat-chart" >
  <div data-swapy-item="cat-chart">
    <div class="chart-card">
      <div class="handle" data-swapy-handle></div>
      <h2>Ventas por Categor√≠as</h2>

      <!-- Contenedor de la gr√°fica -->
      <div id="chart-categorias" style="min-height: 400px; position: relative;">
        <!-- La gr√°fica se insertar√° aqu√≠ din√°micamente -->
      </div>
    </div>
  </div>
</div>

<!-- Estilos CSS -->
<style>

.chart-card h2 {
    color: #ff6b35;
    margin-bottom: 20px;
}
</style>

<!-- Script de la gr√°fica -->

<script>
    // Registrar componentes necesarios de Chart.js
    Chart.register(
        Chart.CategoryScale,
        Chart.LinearScale,
        Chart.BarElement,
        Chart.PieController,
        Chart.ArcElement,
        Chart.Title,
        Chart.Tooltip,
        Chart.Legend
    );

    // Datos iniciales desde el backend
    const ventasPorCategoria = <%- JSON.stringify(ventasPorCategoria || []) %>;
    let categoryChart;

    //console.log('üìä Datos de categor√≠as cargados:', ventasPorCategoria);
    //console.log('üìä Cantidad de categor√≠as:', ventasPorCategoria.length);

    function createCategoryChart(data = null) {
        const chartData = data || ventasPorCategoria;
        
        //console.log('üé® Intentando crear gr√°fica con:', chartData);
        
        if (!chartData || chartData.length === 0) {
            console.error('‚ùå No hay datos para mostrar');
            document.getElementById('chart-categorias').innerHTML = 
                `<div style="text-align: center; padding: 40px;">
                    <div style="font-size: 3em; margin-bottom: 20px;">üìä</div>
                    <p style="color: var(--app-content-main-color);">No hay datos de ventas por categor√≠as</p>
                    <p style="color: #999; font-size: 0.9em; margin-top: 10px;">
                        Registra algunas ventas para ver tus estad√≠sticas
                    </p>
                </div>`;
            return;
        }

        // Preparar datos para la gr√°fica
        const labels = chartData.map(item => item._id || 'Sin categor√≠a');
        const ingresosData = chartData.map(item => item.totalIngresos || 0);
        
        //console.log('üìà Labels:', labels);
        //console.log('üí∞ Ingresos:', ingresosData);
        
        const coloresVibrantes = [
            '#FF6B35', '#4FACFE', '#43E97B', '#F093FB', '#FA709A',
            '#FECA57', '#48DBFB', '#FF9FF3', '#54A0FF', '#5F27CD'
        ];

        // Limpiar contenedor
        document.getElementById('chart-categorias').innerHTML = 
            '<canvas id="categoryChartCanvas" style="max-height: 400px;"></canvas>';

        const ctx = document.getElementById('categoryChartCanvas').getContext('2d');
        
        if (categoryChart) {
            categoryChart.destroy();
        }

        categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Ingresos por Categor√≠a',
                    data: ingresosData,
                    backgroundColor: coloresVibrantes.slice(0, labels.length),
                    borderColor: '#fff',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Mis Ventas por Categor√≠as',
                        font: { size: 18, weight: 'bold' },
                        color: '#ff6b35',
                        padding: { bottom: 20 }
                    },
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            color: '#666',
                            padding: 15,
                            usePointStyle: true,
                            font: { size: 12 }
                        },
                        onClick: function(e, legendItem, legend) {
                            const index = legendItem.index;
                            const chart = legend.chart;
                            const meta = chart.getDatasetMeta(0);
                            
                            // Toggle visibility
                            meta.data[index].hidden = !meta.data[index].hidden;
                            chart.update();
                            
                            // Actualizar estad√≠sticas basadas en lo visible
                            updateStatsFromVisibleData(chart, chartData);
                        }
                    },
                    tooltip: {
                        backgroundColor: '#FFFFFF',
                        titleColor: '#1F2937',
                        bodyColor: '#6B7280',
                        borderColor: '#E5E7EB',
                        borderWidth: 1,
                        cornerRadius: 8,
                        padding: 12,
                        callbacks: {
                            label: function(context) {
                                const categoria = context.label;
                                const ingresos = context.parsed;
                                const item = chartData.find(d => (d._id || 'Sin categor√≠a') === categoria);
                                const cantidadVentas = item ? item.totalVentas : 0;
                                const recibos = item ? item.cantidadRecibos : 0;
                                
                                return [
                                    `Categor√≠a: ${categoria}`,
                                    `Ingresos: $${ingresos.toLocaleString()}`,
                                    `Unidades vendidas: ${cantidadVentas}`,
                                    `Recibos: ${recibos}`
                                ];
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            }
        });

        updateCategoryStats(chartData);
        // //console.log('‚úÖ Gr√°fica creada exitosamente');
    }

    // NUEVA FUNCI√ìN: Actualizar estad√≠sticas basadas en datos visibles
    function updateStatsFromVisibleData(chart, data) {
        const meta = chart.getDatasetMeta(0);
        
        let totalIngresos = 0;
        let totalUnidades = 0;
        let categoriasVisibles = [];
        
        // Recorrer cada segmento de la gr√°fica
        data.forEach((item, index) => {
            // Verificar si este segmento est√° visible
            if (!meta.data[index].hidden) {
                totalIngresos += item.totalIngresos || 0;
                totalUnidades += item.totalVentas || 0;
                categoriasVisibles.push({
                    nombre: item._id,
                    ingresos: item.totalIngresos || 0
                });
            }
        });
        
        // Encontrar la categor√≠a top entre las visibles
        const categoriaTop = categoriasVisibles.length > 0
            ? categoriasVisibles.reduce((max, cat) => 
                cat.ingresos > max.ingresos ? cat : max
              ).nombre
            : 'N/A';
        
        // Actualizar las estad√≠sticas con los nuevos valores
        updateCategoryStats(data, totalIngresos, totalUnidades, categoriaTop);
        
        //console.log('üìä Estad√≠sticas actualizadas:', {
        //    totalIngresos,
        //    totalUnidades,
        //    categoriaTop,
        //    categoriasVisibles: categoriasVisibles.length
        //});
    }

    function updateCategoryStats(data, customIngresos = null, customUnidades = null, customTop = null) {
        const totalIngresos = customIngresos !== null 
            ? customIngresos 
            : data.reduce((sum, item) => sum + (item.totalIngresos || 0), 0);
            
        const totalUnidades = customUnidades !== null
            ? customUnidades
            : data.reduce((sum, item) => sum + (item.totalVentas || 0), 0);
            
        const categoriaTop = customTop !== null
            ? customTop
            : (data.length > 0 ? (data[0]._id || 'N/A') : 'N/A');

        let statsHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-top: 80px;">
                <div style="background: rgba(255,107,53,0.1); padding: 15px; border-radius: 10px; text-align: center;">
                    <div style="font-size: 1.5em; font-weight: bold; color: #ff6b35;">$${totalIngresos.toLocaleString()}</div>
                    <div style="font-size: 0.85em; color: var(--app-content-main-color); opacity: 0.8; margin-top: 5px;">Total Ingresos</div>
                </div>
                <div style="background: rgba(67,233,123,0.1); padding: 15px; border-radius: 10px; text-align: center;">
                    <div style="font-size: 1.5em; font-weight: bold; color: #43e97b;">${totalUnidades}</div>
                    <div style="font-size: 0.85em; color: var(--app-content-main-color); opacity: 0.8; margin-top: 5px;">Unidades Vendidas</div>
                </div>
                <div style="background: rgba(79,172,254,0.1); padding: 15px; border-radius: 10px; text-align: center;">
                    <div style="font-size: 1.5em; font-weight: bold; color: #4facfe;">${categoriaTop}</div>
                    <div style="font-size: 0.85em; color: var(--app-content-main-color); opacity: 0.8; margin-top: 5px;">Top Categor√≠a</div>
                </div>
            </div>
        `;

        const chartContainer = document.getElementById('chart-categorias');
        let existingStats = chartContainer.querySelector('.category-stats');
        
        if (!existingStats) {
            const statsDiv = document.createElement('div');
            statsDiv.className = 'category-stats';
            statsDiv.innerHTML = statsHTML;
            chartContainer.appendChild(statsDiv);
        } else {
            existingStats.innerHTML = statsHTML;
        }
    }

    // Inicializar cuando el DOM est√© listo
    document.addEventListener('DOMContentLoaded', function() {
        //console.log('üöÄ DOM cargado, inicializando gr√°fica...');
        if (!window.categoryChartInitialized) {
            createCategoryChart();
            window.categoryChartInitialized = true;
        }
    });

    // Por si el DOM ya est√° listo
    if (document.readyState !== 'loading' && !window.categoryChartInitialized) {
        //console.log('üöÄ DOM ya estaba listo, inicializando gr√°fica...');
        createCategoryChart();
        window.categoryChartInitialized = true;
    }
</script>
<% } %>