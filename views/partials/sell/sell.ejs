<style>
  #lista-sugerencias {
    list-style: none;
    padding: 0;
    margin: 0;
    border: 1px solid #ccc;
    max-height: 150px;
    overflow-y: auto;
    background: white;
    position: absolute;
    z-index: 9;
    width: 218px;
    top: 75px;
  }

  .contenedor-ventas{
    display: block !important;
  }
  #lista-sugerencias li {
    padding: 5px 10px;
    cursor: pointer;
  }

  #lista-sugerencias li:hover {
    background-color: #f0f0f0;
  }

  .overform {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow-y: scroll;
  }
  #tabla-carrito {
  border-collapse: collapse;
  width: 100%;
}

span{
    font-size: 14px;
    color: var(--app-content-main-color);
}
.status {
    border-radius: 4px;
    display: flex;
    align-items: center;
    padding: 4px 8px;
    font-size: 12px;
    width: max-content;
    display: inline-flex;
}
.status.active {
    color: #2ba972;
    background-color: rgba(43, 169, 114, 0.2);
}

.badge-carrito {
  position: absolute;
  top: -5px;
  right: -5px;
  background: red;
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 12px;
  display: none;
}

</style>


<div class="app-content-inicio">
  <div class="contenedor-ventas dd">
      <div class="cont-from-ventas">
        <div class="contenedor-image titlePr">
          <div>
            <h3 class="titleSell">Escoja El Producto</h3>
            <span style="text-align: center;">Recuerde que solo aparecen los productos <br> que tengan  el estado en 
              <span class="status active">
                Activo
              </span>
            </span>
          </div>
          <div class="lottie-animation" data-animation-path="/Lottie/animacionHome.json"></div>
        </div>
        <div class="from-ventas">
          <form id="agregar-producto-form" class="overform" action="/receipt_page" method="POST">
            <label>Buscar Producto</label>
            <input type="text" id="buscar-producto" placeholder="Escribe para buscar..." autocomplete="off">
            <input type="hidden" id="producto-id" name="productoVenta">
            <ul id="lista-sugerencias" class="sugerencias"></ul>

            <hr>
            <div id="panel_selector"></div>
            <label id="signo">Precio</label>
            <input type="text" id="precio-formateado" readonly>
            <input type="hidden" id="precio" name="precioVenta">
            <hr>
            <label>Cantidad</label>
            <input type="number" id="cantidad" name="cantidadVenta">
            <hr>
            <label>Medio De Pago</label>
            <select name="medio">
              <option>Efectivo</option>
              <option>Transferencia</option>
            </select>
            <hr>
            <label>Nombre De Cliente</label>
            <input type="text" name="nombrecliente" required>
            <hr>
            <label>Identificaci√≥n</label>
            <input type="number" name="identificacionCliente" required>
            <hr>
            <label>Hora de Venta</label>
            <input type="text" name="fechaa" id="clock" readonly="">
            <hr>
            <label>Codigo</label>
            <input type="text" id="codigo" name="codigo" readonly>
            <hr>
<label>Vendedor</label>
<select name="vendedor" required>
  <% vendedores.forEach(vendedor => { %>
    <option value="<%= vendedor._id %>"><%= vendedor.nombre %></option>
  <% }) %>
</select>
            <hr>
            <input type="hidden" name="items" id="items-json">

            <%- include('./buttonAddCart') %>
          </form>

        </div>
      </div>

  </div>
<audio id="carrito-sonido" src="/sounds/click.mp3" preload="auto"></audio>

  <script>
    function generarCodigoUnico() {
      const timestamp = Date.now().toString(); // marca de tiempo
      const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0'); // n√∫mero aleatorio
      return timestamp + random;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const inputCodigo = document.getElementById("codigo");
      const codigoGenerado = generarCodigoUnico();
      inputCodigo.value = codigoGenerado;
    });
  </script>



<script>
  const carrito = [];

  function actualizarTotalGeneral() {
    const total = carrito.reduce((sum, item) => sum + item.precioVenta * item.cantidadVenta, 0);
    document.getElementById('total-general').textContent = `$${total.toLocaleString('es-CO')}`;
  }

  // ‚úÖ Validaci√≥n + agregar al carrito
  document.getElementById('agregar-producto-btn').addEventListener('click', () => {
    const productoId = document.getElementById('producto-id').value;
    const productoNombre = document.getElementById('buscar-producto').value;
    const precio = parseFloat(document.getElementById('precio').value);
    const cantidad = parseInt(document.getElementById('cantidad').value);
    const nombreCliente = document.querySelector('[name="nombrecliente"]').value.trim();
    const identificacionCliente = document.querySelector('[name="identificacionCliente"]').value.trim();

    // üõë Validar nombre e identificaci√≥n
    if (!nombreCliente || !identificacionCliente) {
      alert('Debes ingresar el nombre e identificaci√≥n del cliente antes de agregar productos.');
      return;
    }

    // üõë Validar producto y cantidad
    if (!productoId || isNaN(precio) || isNaN(cantidad) || cantidad <= 0) {
      alert('Debes seleccionar un producto v√°lido y una cantidad mayor a 0.');
      return;
    }

    // ‚úÖ Agregar al carrito
    carrito.push({
      productoVenta: productoId,
      nombre: productoNombre,
      precioVenta: precio,
      cantidadVenta: cantidad
    });

    // Actualizar tabla visual
    const tbody = document.querySelector('#tabla-carrito tbody');
    const row = document.createElement('tr');
    const index = carrito.length - 1; 
    row.innerHTML = `
      <td>${productoNombre}</td>
      <td>${cantidad}</td>
      <td>$${precio.toLocaleString('es-CO')}</td>
      <td>$${(precio * cantidad).toLocaleString('es-CO')}</td>
      <td><button class="btn-eliminar" data-index="${index}">‚ùå</button></td>
    `;
    tbody.appendChild(row);

    row.querySelector('.btn-eliminar').addEventListener('click', function () {
  const index = parseInt(this.getAttribute('data-index'));
  if (!isNaN(index)) {
    carrito.splice(index, 1); // eliminar del array
    row.remove(); // quitar fila del DOM
    actualizarTotalGeneral();

    // Actualizar contador visual del √≠cono
    const contador = document.getElementById('contador-carrito');
    contador.textContent = carrito.length;
    contador.style.display = carrito.length ? 'inline-block' : 'none';
  }
});

    // Actualizar total general
    actualizarTotalGeneral();

    // üîä Reproducir sonido
    const sonido = document.getElementById('carrito-sonido');
    if (sonido) sonido.play();

    // üî¥ Actualizar contador visual del √≠cono
    const contador = document.getElementById('contador-carrito');
    contador.textContent = carrito.length;
    contador.style.display = 'inline-block';

    // Limpiar cantidad
    document.getElementById('cantidad').value = '';
  });

  // ‚úÖ Validaci√≥n al enviar formulario
  document.getElementById('agregar-producto-form').addEventListener('submit', function (e) {
    const nombreCliente = this.querySelector('[name="nombrecliente"]').value.trim();
    const identificacionCliente = this.querySelector('[name="identificacionCliente"]').value.trim();

    if (carrito.length === 0) {
      e.preventDefault();
      alert('Agrega al menos un producto al recibo.');
      return;
    }

    if (!nombreCliente) {
      e.preventDefault();
      alert('El nombre del cliente es obligatorio.');
      return;
    }

    if (!identificacionCliente || identificacionCliente.length < 6) {
      e.preventDefault();
      alert('La identificaci√≥n del cliente es obligatoria y debe tener al menos 6 d√≠gitos.');
      return;
    }

    // Guardar carrito en campo oculto
    document.getElementById('items-json').value = JSON.stringify(carrito);
  });
</script>




  <script>
   document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('buscar-producto');
  const lista = document.getElementById('lista-sugerencias');
  const inputHiddenId = document.getElementById('producto-id');
  const inputPrecio = document.getElementById('precio');
  const inputPrecioFormateado = document.getElementById('precio-formateado');

  let timeout;

  input.addEventListener('input', () => {
    clearTimeout(timeout);

    const valor = input.value.trim();
    if (!valor) {
      lista.innerHTML = '';
      return;
    }

    timeout = setTimeout(() => {
      fetch(`/api/productos/activos?q=${encodeURIComponent(valor)}`)
        .then(res => res.json())
        .then(data => {
          lista.innerHTML = '';
          if (data.length === 0) {
            lista.innerHTML = '<li>No se encontraron productos</li>';
            return;
          }
          data.forEach(prod => {
            const li = document.createElement('li');
            li.textContent = `${prod.producto} - $${prod.precio}`;
            li.dataset.id = prod._id;
            li.dataset.precio = prod.precio;
            li.dataset.cantidad = prod.cantidad;
            lista.appendChild(li);
          });
        })
        .catch(error => {
          console.error('Error al buscar productos:', error);
          lista.innerHTML = '<li>Error al buscar productos</li>';
        });
    }, 200); // retraso para evitar muchas peticiones
  });

  lista.addEventListener('click', e => {
    if (e.target.tagName === 'LI') {
      const nombre = e.target.textContent.split(' - ')[0];
      const id = e.target.dataset.id;
      const precio = e.target.dataset.precio;

      input.value = nombre;
      inputHiddenId.value = id;
      inputPrecio.value = precio;
      inputPrecioFormateado.value = Number(precio).toLocaleString("es-CO");

      lista.innerHTML = '';
    }
  });

  document.addEventListener('click', (e) => {
    if (!input.contains(e.target) && !lista.contains(e.target)) {
      lista.innerHTML = '';
    }
  });
});

  </script>